AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM App w/ API GW, CORS and Cognito configured

Parameters:
  Environment:
    Type: String
    Description: Environment stage (eg. dev, qa, prod)
    Default: dev

  AppName:
    Type: String
    Description: Name of the App
    Default: firefly

Globals:
  Function:
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 30

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'3600'"
        AllowMethods: "'OPTIONS,POST,PATCH,GET,PUT,DELETE'"
      GatewayResponses:
        DEFAULT_4xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Methods: "'OPTIONS,POST,PATCH,GET,PUT,DELETE'"
        DEFAULT_5xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Methods: "'OPTIONS,POST,PATCH,GET,PUT,DELETE'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !<!Sub> '{{resolve:ssm:/${AppName}/cognito/user-pool-arn:1}}'
  
  EntityTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: GSI1pk
          AttributeType: S
        - AttributeName: GSI1sk
          AttributeType: S
        - AttributeName: GSI2pk
          AttributeType: S
        - AttributeName: GSI2sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1pk
              KeyType: HASH
            - AttributeName: GSI1sk
              KeyType: RANGE
          Projection:
            ProjectionType: 'ALL'
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2pk
              KeyType: HASH
            - AttributeName: GSI2sk
              KeyType: RANGE
          Projection:
            ProjectionType: 'ALL'
      BillingMode: PAY_PER_REQUEST

  # ====== API Gateway Lambdas ======
  GetStatus:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/status-get.handler
      Description: HTTP GET returns API status
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /status
            Method: GET
            RestApiId: !Ref Api
            Auth:
              Authorizer: CognitoAuthorizer

  # ====== BatchJob ======
  BatchJobQueue:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - Key: project
          Value: !Ref AppName

  BatchJobConsumer:
    Type: AWS::Serverless::Function
    Properties:
      Description: Consumes incoming Baton batch jobs
      Handler: src/handlers/batch-job-consumer.handler
      Policies:
        - SQSPollerPolicy: 
            QueueName: !Ref BatchJobQueue
        - DynamoDBCrudPolicy:
            TableName: !Ref EntityTable
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          ENTITY_TABLE: !Ref EntityTable
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BatchJobQueue.Arn
            BatchSize: 1  # this can probably be increased
            Enabled: true

  # ====== BatchManager ======
  BatchManager:
    Type: AWS::Serverless::Function
    Properties:
      Description: Manages the batch job sending process
      Handler: src/handlers/batch-manager.handler
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref BatchSubmit
        - DynamoDBCrudPolicy:
            TableName: !Ref EntityTable
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          ENTITY_TABLE: !Ref EntityTable
          BATCH_SUBMIT_LAMBDA: !Ref BatchSubmit

  # ====== BatchSubmit ======
  BatchSubmitDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 86400
      Tags:
        - Key: project
          Value: !Ref AppName

  BatchSubmit:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AppName}-batch-submit
      Description: submits batch jobs to external api
      Handler: src/handlers/batch-submit.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EntityTable
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          ENTITY_TABLE: !Ref EntityTable
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 600
        MaximumRetryAttempts: 2
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: arn:aws:events:us-east-1:646111714468:event-bus/firefly
          OnFailure:
            Type: SQS
            Destination: !GetAtt BatchSubmitDLQ.Arn

  # ====== BatchSubmit ======
  
  # BatchSubmitConsumer:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Description: Consumes incoming Baton batch jobs
  #     Handler: src/handlers/batch-submit-consumer.handler
  #     Policies:
  #       - SQSPollerPolicy: 
  #           QueueName: !Ref BatchJobQueue
  #     Environment:
  #       Variables:
  #         NODE_ENV: !Ref Environment
  #     Events:
  #       SQSEvent:
  #         Type: SQS
  #         Properties:
  #           Queue: !GetAtt BatchSubmitQueue.Arn
  #           BatchSize: 1  # this can probably be increased
  #           Enabled: true

  # ====== EventBridge ======
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref AppName

  EventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/events/${EventBus}
      RetentionInDays: 14

  EventsToCWLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-EventsCWLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/events/*:*

  AllEventsRule:
    Type: AWS::Events::Rule
    Properties:
        Description: All events rule
        State: ENABLED
        EventBusName: !Ref EventBus
        EventPattern:
            account:
              - !Ref AWS::AccountId
        RoleArn: !GetAtt EventsToCWLogsRole.Arn
        Targets:
            - Arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${EventsLogGroup}
              Id: EventsLogGroup

  EventBusName:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: !Sub /${AppName}/events/event-bus-name
      Type: String
      Value: !Ref EventBus

Outputs:
  ApiUrl:
    Description: API GW URL
    Value: !<!Sub> 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/'

  EventBusName:
    Description: Name of the custom event bus
    Value: !Ref EventBus